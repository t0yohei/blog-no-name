import { j as createVNode, F as Fragment } from './astro.4c29b78c.mjs';
import { $ as $$MarkdownPostLayout } from './MarkdownPostLayout.660b7d0f.mjs';
import 'path-to-regexp';
import 'mime';
import 'cookie';
import 'kleur/colors';
import 'string-width';
import 'slash';
import 'html-escaper';
import './pages/all.3026cc68.mjs';
/* empty css                          *//* empty css                           *//* empty css                                                               *//* empty css                          *//* empty css                                                                           */
const html = "<p>基本的には公式サイトに書いてある通り。</p>\n<p><a href=\"https://docs.astro.build/en/guides/client-side-scripts/#web-components-with-custom-elements\">https://docs.astro.build/en/guides/client-side-scripts/#web-components-with-custom-elements</a></p>\n<p>astro ファイル内に書く場合は、 <code>&#x3C;script></code> タグ内にカスタム要素を実装して使うだけ(↓ は公式サイトからの引用)。</p>\n<p><code>src/components/AstroHeart.astro</code></p>\n<pre is:raw=\"\" class=\"astro-code\" style=\"background-color: #0d1117; overflow-x: auto;\"><code><span class=\"line\"><span style=\"color: #8B949E\">&#x3C;!-- Wrap the component elements in our custom element “astro-heart”. --></span></span>\n<span class=\"line\"><span style=\"color: #8B949E\">&#x3C;!-- prettier-ignore --></span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">&#x3C;</span><span style=\"color: #7EE787\">astro-heart</span><span style=\"color: #C9D1D9\">></span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">  &#x3C;</span><span style=\"color: #7EE787\">button</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #79C0FF\">aria-label</span><span style=\"color: #C9D1D9\">=</span><span style=\"color: #A5D6FF\">\"Heart\"</span><span style=\"color: #C9D1D9\">>💜&#x3C;/</span><span style=\"color: #7EE787\">button</span><span style=\"color: #C9D1D9\">> × &#x3C;</span><span style=\"color: #7EE787\">span</span><span style=\"color: #C9D1D9\">>0&#x3C;/</span><span style=\"color: #7EE787\">span</span><span style=\"color: #C9D1D9\">></span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">&#x3C;/</span><span style=\"color: #7EE787\">astro-heart</span><span style=\"color: #C9D1D9\">></span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">&#x3C;</span><span style=\"color: #7EE787\">script</span><span style=\"color: #C9D1D9\">></span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">  </span><span style=\"color: #8B949E\">// Define the behaviour for our new type of HTML element.</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">  </span><span style=\"color: #FF7B72\">class</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #FFA657\">AstroHeart</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #FF7B72\">extends</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #79C0FF\">HTMLElement</span><span style=\"color: #C9D1D9\"> {</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">    </span><span style=\"color: #FF7B72\">constructor</span><span style=\"color: #C9D1D9\">() {</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">      </span><span style=\"color: #79C0FF\">super</span><span style=\"color: #C9D1D9\">();</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">      </span><span style=\"color: #FF7B72\">let</span><span style=\"color: #C9D1D9\"> count </span><span style=\"color: #FF7B72\">=</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #79C0FF\">0</span><span style=\"color: #C9D1D9\">;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">      </span><span style=\"color: #FF7B72\">const</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #79C0FF\">heartButton</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #FF7B72\">=</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #79C0FF\">this</span><span style=\"color: #C9D1D9\">.</span><span style=\"color: #D2A8FF\">querySelector</span><span style=\"color: #C9D1D9\">(</span><span style=\"color: #A5D6FF\">'button'</span><span style=\"color: #C9D1D9\">);</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">      </span><span style=\"color: #FF7B72\">const</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #79C0FF\">countSpan</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #FF7B72\">=</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #79C0FF\">this</span><span style=\"color: #C9D1D9\">.</span><span style=\"color: #D2A8FF\">querySelector</span><span style=\"color: #C9D1D9\">(</span><span style=\"color: #A5D6FF\">'span'</span><span style=\"color: #C9D1D9\">);</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">      </span><span style=\"color: #8B949E\">// Each time the button is clicked, update the count.</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">      heartButton.</span><span style=\"color: #D2A8FF\">addEventListener</span><span style=\"color: #C9D1D9\">(</span><span style=\"color: #A5D6FF\">'click'</span><span style=\"color: #C9D1D9\">, () </span><span style=\"color: #FF7B72\">=></span><span style=\"color: #C9D1D9\"> {</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">        count</span><span style=\"color: #FF7B72\">++</span><span style=\"color: #C9D1D9\">;</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">        countSpan.textContent </span><span style=\"color: #FF7B72\">=</span><span style=\"color: #C9D1D9\"> count;</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">      });</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">    }</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">  }</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">  </span><span style=\"color: #8B949E\">// Tell the browser to use our AstroHeart class for &#x3C;astro-heart> elements.</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">  customElements.</span><span style=\"color: #D2A8FF\">define</span><span style=\"color: #C9D1D9\">(</span><span style=\"color: #A5D6FF\">'astro-heart'</span><span style=\"color: #C9D1D9\">, AstroHeart);</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">&#x3C;/</span><span style=\"color: #7EE787\">script</span><span style=\"color: #C9D1D9\">></span></span></code></pre>\n<p>外部ファイルに切り出す場合は、 <code>&#x3C;script></code> タグの src 属性に指定するか、</p>\n<pre is:raw=\"\" class=\"astro-code\" style=\"background-color: #0d1117; overflow-x: auto;\"><code><span class=\"line\"><span style=\"color: #C9D1D9\">&#x3C;</span><span style=\"color: #7EE787\">script</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #79C0FF\">src</span><span style=\"color: #C9D1D9\">=</span><span style=\"color: #A5D6FF\">\"../components/aboutme.js\"</span><span style=\"color: #C9D1D9\">>&#x3C;/</span><span style=\"color: #7EE787\">script</span><span style=\"color: #C9D1D9\">></span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">&#x3C;</span><span style=\"color: #7EE787\">about-me</span><span style=\"color: #C9D1D9\">>&#x3C;/</span><span style=\"color: #7EE787\">about-me</span><span style=\"color: #C9D1D9\">></span></span></code></pre>\n<p>import で読み込むだけ。</p>\n<pre is:raw=\"\" class=\"astro-code\" style=\"background-color: #0d1117; overflow-x: auto;\"><code><span class=\"line\"><span style=\"color: #C9D1D9\">&#x3C;</span><span style=\"color: #7EE787\">script</span><span style=\"color: #C9D1D9\">></span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">  </span><span style=\"color: #FF7B72\">import</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #A5D6FF\">'../components/aboutme.js'</span><span style=\"color: #C9D1D9\">;</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">&#x3C;/</span><span style=\"color: #7EE787\">script</span><span style=\"color: #C9D1D9\">></span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">&#x3C;</span><span style=\"color: #7EE787\">about-me</span><span style=\"color: #C9D1D9\">>&#x3C;/</span><span style=\"color: #7EE787\">about-me</span><span style=\"color: #C9D1D9\">></span></span></code></pre>\n<p>そうすると、ページの <code>head</code> 要素に <code>type=\"module\"</code> で挿入されてカスタム要素が使えるようになる。</p>\n<p>昔は resolve API とかを使う必要があったらしいけど: <a href=\"https://navillus.dev/blog/web-components-in-astro\">https://navillus.dev/blog/web-components-in-astro</a></p>\n<p>resolve API が廃止されて今の形になったらしい: <a href=\"https://docs.astro.build/en/migrate/#deprecated-astroresolve\">https://docs.astro.build/en/migrate/#deprecated-astroresolve</a></p>\n<p>実装サンプル: <a href=\"https://github.com/t0yohei/blog-no-name/pull/1/files\">https://github.com/t0yohei/blog-no-name/pull/1/files</a></p>";

				const frontmatter = {"layout":"../../layouts/MarkdownPostLayout.astro","title":"Astro 内で Web components を使用する方法","pubDate":"2023-01-08"};
				const file = "/Users/kyohei_toyoda/repos/src/github.com/t0yohei/blog-no-name/src/content/blog/20230108_add_webcomponents.md";
				const url = undefined;
				function rawContent() {
					return "\n基本的には公式サイトに書いてある通り。\n\nhttps://docs.astro.build/en/guides/client-side-scripts/#web-components-with-custom-elements\n\nastro ファイル内に書く場合は、 `<script>` タグ内にカスタム要素を実装して使うだけ(↓ は公式サイトからの引用)。\n\n`src/components/AstroHeart.astro`\n\n```html\n<!-- Wrap the component elements in our custom element “astro-heart”. -->\n<!-- prettier-ignore -->\n<astro-heart>\n  <button aria-label=\"Heart\">💜</button> × <span>0</span>\n</astro-heart>\n\n<script>\n  // Define the behaviour for our new type of HTML element.\n  class AstroHeart extends HTMLElement {\n    constructor() {\n      super();\n      let count = 0;\n\n      const heartButton = this.querySelector('button');\n      const countSpan = this.querySelector('span');\n\n      // Each time the button is clicked, update the count.\n      heartButton.addEventListener('click', () => {\n        count++;\n        countSpan.textContent = count;\n      });\n    }\n  }\n\n  // Tell the browser to use our AstroHeart class for <astro-heart> elements.\n  customElements.define('astro-heart', AstroHeart);\n</script>\n```\n\n外部ファイルに切り出す場合は、 `<script>` タグの src 属性に指定するか、\n\n```html\n<script src=\"../components/aboutme.js\"></script>\n\n<about-me></about-me>\n```\n\nimport で読み込むだけ。\n\n```html\n<script>\n  import '../components/aboutme.js';\n</script>\n\n<about-me></about-me>\n```\n\nそうすると、ページの `head` 要素に `type=\"module\"` で挿入されてカスタム要素が使えるようになる。\n\n昔は resolve API とかを使う必要があったらしいけど: https://navillus.dev/blog/web-components-in-astro\n\nresolve API が廃止されて今の形になったらしい: https://docs.astro.build/en/migrate/#deprecated-astroresolve\n\n実装サンプル: https://github.com/t0yohei/blog-no-name/pull/1/files\n";
				}
				function compiledContent() {
					return html;
				}
				function getHeadings() {
					return [];
				}
				async function Content() {
					const { layout, ...content } = frontmatter;
					content.file = file;
					content.url = url;
					const contentFragment = createVNode(Fragment, { 'set:html': html });
					return createVNode($$MarkdownPostLayout, {
									file,
									url,
									content,
									frontmatter: content,
									headings: getHeadings(),
									rawContent,
									compiledContent,
									'server:root': true,
									children: contentFragment
								});
				}
				Content[Symbol.for('astro.needsHeadRendering')] = false;

const collectedLinks = ["_astro/Header.astro_astro_type_style_index_0_lang.70dd3b15.css","_astro/MarkdownPostLayout.astro_astro_type_style_index_0_lang.1a87fd40.css","_astro/global.475eecb7.css"];
					const collectedStyles = "@@ASTRO-STYLES@@";

export { Content, collectedLinks, collectedStyles, getHeadings };
