import { j as createVNode, F as Fragment } from './astro.4c29b78c.mjs';
import { $ as $$MarkdownPostLayout } from './MarkdownPostLayout.660b7d0f.mjs';
import 'path-to-regexp';
import 'mime';
import 'cookie';
import 'kleur/colors';
import 'string-width';
import 'slash';
import 'html-escaper';
import './pages/all.3026cc68.mjs';
/* empty css                          *//* empty css                           *//* empty css                                                               *//* empty css                          *//* empty css                                                                           */
const html = "<p>主にプログラミングの話。\n最近プログラミング業をしていく中で気づいた自分の変化。</p>\n<p>以前はパワフルそうなライブラリを見つけたら、「取り込んでレバレッジを聞かせて高機能なものを素早くリリースや！」と前のめりでやっていたのが、最近では「今本当に必要なものをシンプルに自分で作ろう」と考えるようになった。</p>\n<p>いくつか理由は思い浮かぶけど、主には <code>高機能なライブラリを入れてもあまり使われないことが(多々)ある</code> ってことと、 <code>メンテがだるい</code> ってところが大きい。どちらかというとやはり後者が大きい。</p>\n<p>そう、メンテがだるいのである。\nメンテは主にバージョンアップのことを指しているが、そのライブラリ自体のバージョンアップに限らず、フレームワークのバージョンが上がったのにライブラリはそれに追従してなくて、自サービス内でのフレームワークアプデの邪魔になるとか色々。</p>\n<p>高機能であればあるほど自分が使っていない機能の改修でアプデが入るし、破壊的変更を入れてどんどん改良してくれるし(自分達はほとんど使っていないのに関わらずというのが重要)、高機能であるが故にライブラリ自体がフレームワークのバージョンアップに追従するのも大変で対応バージョンの公開が遅くなったり。</p>\n<p>自分は Vue3 のアプデ対応で色々思い知った口だけど、似たような話はプログラミングの歴史で繰り返されてきている気がする。</p>\n<p>そんなこんなで欲しくなるのは小さくてシンプルなもので、それくらいのライブラリを入れるくらいなら自分で作っちゃえってなって作るのだが、さっき言ったフレームワークのバージョンアップ時にその機能の改修必要になることあるじゃん、ってのはそれもそう。</p>\n<p>なので、可能な限りフレームワーク非依存で作りたい。とは言っても言語レベルでの仕様変更もあったりで完全に仕様追従のためのメンテからは解放されないが、それでも更新の手間暇は少なく済むはず。</p>\n<p>というわけで、後で拡張される余地を残しつつ、今必要になっているものだけをシンプルに作るというのが良いと思うようになってきている。やっぱり機能が物足りないとなったら、自分か必要になった人によしなに追加してもらおうという具合。YAGNI、YAGNI。</p>\n<h2 id=\"何に通づるか\">何に通づるか</h2>\n<p>日常生活に通ずるものはないかなーと考えてみると、そういえば最近は壊れにくくて、そこそこいい機能が備わっているものを買うようになっている。家電とか。</p>\n<p>なぜかというと、買い替えをしたくないのである。買い替えが面倒なのだ。\n壊れやすいものだともちろん買い替えが必要だし、安物買いの銭失い的なものでもやはり買い替えたくなる。そういうのが嫌で、一回の買い物で長らく買い替えから解放されたいという怠惰。</p>\n<p>プログラミングも、家電の買い換えも、怠惰の故に行き着いた結論という共通点がありそうだった。</p>\n<h2 id=\"何を失うか\">何を失うか</h2>\n<p>怠惰を突き詰めるといいことばかりではなく悪いこともやはり起きてくる。例えばこのブログも可能な限り少ない技術で小さく作っているが、そのせいもあって現状貧相な見た目になっている。</p>\n<p>後から拡張すればどうにかなるとは思っているが、最初からリッチな UI フレームワークなどをつっこんでいれば今より幾分マシな見た目になっていそうではある。</p>\n<p>ブラウザが勝手にめっちゃいい感じの見た目に整えてくれればいいのだけど、今はそうなってくれないので何か方法考えないと。できればライブラリとかはあまり入れたくないけど、自分で CSS をたくさん書くのも何か違うなという気もする…。どうしたものか</p>";

				const frontmatter = {"layout":"../../layouts/MarkdownPostLayout.astro","title":"大きくて多機能なものよりも、小さくてシンプルなものを好むようになった","pubDate":"2023-01-18"};
				const file = "/Users/kyohei_toyoda/repos/src/github.com/t0yohei/blog-no-name/src/content/blog/20230119.md";
				const url = undefined;
				function rawContent() {
					return "\n主にプログラミングの話。\n最近プログラミング業をしていく中で気づいた自分の変化。\n\n以前はパワフルそうなライブラリを見つけたら、「取り込んでレバレッジを聞かせて高機能なものを素早くリリースや！」と前のめりでやっていたのが、最近では「今本当に必要なものをシンプルに自分で作ろう」と考えるようになった。\n\nいくつか理由は思い浮かぶけど、主には `高機能なライブラリを入れてもあまり使われないことが(多々)ある` ってことと、 `メンテがだるい` ってところが大きい。どちらかというとやはり後者が大きい。\n\nそう、メンテがだるいのである。\nメンテは主にバージョンアップのことを指しているが、そのライブラリ自体のバージョンアップに限らず、フレームワークのバージョンが上がったのにライブラリはそれに追従してなくて、自サービス内でのフレームワークアプデの邪魔になるとか色々。\n\n高機能であればあるほど自分が使っていない機能の改修でアプデが入るし、破壊的変更を入れてどんどん改良してくれるし(自分達はほとんど使っていないのに関わらずというのが重要)、高機能であるが故にライブラリ自体がフレームワークのバージョンアップに追従するのも大変で対応バージョンの公開が遅くなったり。\n\n自分は Vue3 のアプデ対応で色々思い知った口だけど、似たような話はプログラミングの歴史で繰り返されてきている気がする。\n\nそんなこんなで欲しくなるのは小さくてシンプルなもので、それくらいのライブラリを入れるくらいなら自分で作っちゃえってなって作るのだが、さっき言ったフレームワークのバージョンアップ時にその機能の改修必要になることあるじゃん、ってのはそれもそう。\n\nなので、可能な限りフレームワーク非依存で作りたい。とは言っても言語レベルでの仕様変更もあったりで完全に仕様追従のためのメンテからは解放されないが、それでも更新の手間暇は少なく済むはず。\n\nというわけで、後で拡張される余地を残しつつ、今必要になっているものだけをシンプルに作るというのが良いと思うようになってきている。やっぱり機能が物足りないとなったら、自分か必要になった人によしなに追加してもらおうという具合。YAGNI、YAGNI。\n\n## 何に通づるか\n\n日常生活に通ずるものはないかなーと考えてみると、そういえば最近は壊れにくくて、そこそこいい機能が備わっているものを買うようになっている。家電とか。\n\nなぜかというと、買い替えをしたくないのである。買い替えが面倒なのだ。\n壊れやすいものだともちろん買い替えが必要だし、安物買いの銭失い的なものでもやはり買い替えたくなる。そういうのが嫌で、一回の買い物で長らく買い替えから解放されたいという怠惰。\n\nプログラミングも、家電の買い換えも、怠惰の故に行き着いた結論という共通点がありそうだった。\n\n## 何を失うか\n\n怠惰を突き詰めるといいことばかりではなく悪いこともやはり起きてくる。例えばこのブログも可能な限り少ない技術で小さく作っているが、そのせいもあって現状貧相な見た目になっている。\n\n後から拡張すればどうにかなるとは思っているが、最初からリッチな UI フレームワークなどをつっこんでいれば今より幾分マシな見た目になっていそうではある。\n\nブラウザが勝手にめっちゃいい感じの見た目に整えてくれればいいのだけど、今はそうなってくれないので何か方法考えないと。できればライブラリとかはあまり入れたくないけど、自分で CSS をたくさん書くのも何か違うなという気もする...。どうしたものか\n";
				}
				function compiledContent() {
					return html;
				}
				function getHeadings() {
					return [{"depth":2,"slug":"何に通づるか","text":"何に通づるか"},{"depth":2,"slug":"何を失うか","text":"何を失うか"}];
				}
				async function Content() {
					const { layout, ...content } = frontmatter;
					content.file = file;
					content.url = url;
					const contentFragment = createVNode(Fragment, { 'set:html': html });
					return createVNode($$MarkdownPostLayout, {
									file,
									url,
									content,
									frontmatter: content,
									headings: getHeadings(),
									rawContent,
									compiledContent,
									'server:root': true,
									children: contentFragment
								});
				}
				Content[Symbol.for('astro.needsHeadRendering')] = false;

const collectedLinks = ["_astro/Header.astro_astro_type_style_index_0_lang.70dd3b15.css","_astro/MarkdownPostLayout.astro_astro_type_style_index_0_lang.1a87fd40.css","_astro/global.475eecb7.css"];
					const collectedStyles = "@@ASTRO-STYLES@@";

export { Content, collectedLinks, collectedStyles, getHeadings };
