---
import { parseDate, parseDescription, type Post } from '../model';
import { Icon } from 'astro-icon/components';
import { Image } from 'astro:assets';
import QiitaIcon from '../icons/qiita.png';

export interface Props {
  post: Post;
}

const { post } = Astro.props;

const buildPreview = (text: string, size: number = 50): string => {
  if (!text) return '';
  return text.length > size ? text.substring(0, size).replace(/.$/, '...') : text;
};

const getPostHref = (): string => {
  return post.collection === 'blogs'
    ? `blogs/${post.id}`
    : post.collection === 'qiitas'
      ? (post.data.url ?? '')
      : (post.data.link ?? '');
};
---

<li class="link-card">
  <a href={getPostHref()}>
    <span class="icon-container">
      {
        post.collection === 'slides' ? (
          <Icon class="icon" name="speakerdeck" />
        ) : post.collection === 'qiitas' ? (
          <Image src={QiitaIcon} alt="Qiita" class="icon" />
        ) : post.collection === 'zenns' ? (
          <Icon class="icon" name="zenn" />
        ) : post.collection === 'devTos' ? (
          <Icon class="icon" name="devTo" />
        ) : (
          <Icon size={20} class="icon" name="mdi:file-document" />
        )
      }
    </span>
    <h2>{buildPreview(post.data.title ?? '', 80)}</h2>
    <span class="link-icon-container">
      {
        post.collection === 'blogs' ? (
          <Icon class="icon" name="mdi:arrow-right" />
        ) : (
          <Icon class="icon" name="mdi:external-link" />
        )
      }
    </span>
    <p class="blog-body">
      {buildPreview(parseDescription(post) ?? '')}
    </p>
    <p class="pub-date">
      {parseDate(post)?.toISOString().slice(0, 10)}
    </p>
  </a>
</li>
<style>
  .link-card {
    list-style: none;
    display: flex;
    background-color: white;
    background-image: var(--accent-gradient);
    background-size: 400%;
    border-radius: 0.5rem;
    background-position: 100%;
    transition: background-position 0.6s cubic-bezier(0.22, 1, 0.36, 1);
    box-shadow:
      0 4px 6px -1px rgba(0, 0, 0, 0.1),
      0 2px 4px -2px rgba(0, 0, 0, 0.1);
    position: relative;
  }

  .link-card > a {
    width: 100%;
    text-decoration: none;
    line-height: 1.4;
    border-radius: 0.35rem;
    color: #111;
    background-color: white;
    opacity: 0.8;
  }
  h2 {
    margin: 0;
    font-size: 1.25rem;
    transition: color 0.6s cubic-bezier(0.22, 1, 0.36, 1);
    padding: 0.5rem 2.5rem;
  }

  p {
    margin: 0;
    color: #444;
  }

  .blog-body {
    font-size: 1.1rem;
    padding: 0.5rem 1.5rem 2rem;
  }

  .icon-container {
    position: absolute;
    left: 12px;
    top: 12px;
  }

  .link-icon-container {
    position: absolute;
    right: 12px;
    top: 12px;
  }

  .pub-date {
    position: absolute;
    right: 12px;
    bottom: 12px;
  }

  .link-card:is(:hover, :focus-within) {
    background-position: 0;
  }

  .icon {
    width: 20px;
    height: 20px;
    padding: 0;
    margin: 0;
  }

  .link-card:is(:hover, :focus-within) h2 {
    color: rgb(var(--accent));
  }
</style>
